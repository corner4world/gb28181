// Code generated by godddx, DO AVOID EDIT.
package configdb

import (
	"context"

	"github.com/gowvp/gb28181/internal/core/config"
	"github.com/ixugo/goddd/pkg/orm"
	"gorm.io/gorm"
)

var _ config.ConfigStorer = Config{}

// Config Related business namespaces
type Config DB

// NewConfig instance object
func NewConfig(db *gorm.DB) Config {
	return Config{db: db}
}

// Find implements config.ConfigStorer.
func (d Config) Find(ctx context.Context, bs *[]*config.Config, page orm.Pager, opts ...orm.QueryOption) (int64, error) {
	return orm.FindWithContext(ctx, d.db, bs, page, opts...)
}

// Get implements config.ConfigStorer.
func (d Config) Get(ctx context.Context, model *config.Config, opts ...orm.QueryOption) error {
	return orm.FirstWithContext(ctx, d.db, model, opts...)
}

// Add implements config.ConfigStorer.
func (d Config) Add(ctx context.Context, model *config.Config) error {
	return d.db.WithContext(ctx).Create(model).Error
}

// Edit implements config.ConfigStorer.
func (d Config) Edit(ctx context.Context, model *config.Config, changeFn func(*config.Config), opts ...orm.QueryOption) error {
	return orm.UpdateWithContext(ctx, d.db, model, changeFn, opts...)
}

// Del implements config.ConfigStorer.
func (d Config) Del(ctx context.Context, model *config.Config, opts ...orm.QueryOption) error {
	return orm.DeleteWithContext(ctx, d.db, model, opts...)
}

func (d Config) Session(ctx context.Context, changeFns ...func(*gorm.DB) error) error {
	return d.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		for _, fn := range changeFns {
			if err := fn(tx); err != nil {
				return err
			}
		}
		return nil
	})
}

func (d Config) EditWithSession(tx *gorm.DB, model *config.Config, changeFn func(b *config.Config) error, opts ...orm.QueryOption) error {
	return orm.UpdateWithSession(tx, model, changeFn, opts...)
}

func (d Config) FirstOrCreate(model *config.Config) error {
	return d.db.FirstOrCreate(model).Error
}
